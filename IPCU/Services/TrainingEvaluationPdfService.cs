namespace IPCU.Services
{
    using QuestPDF.Fluent;
    using QuestPDF.Helpers;
    using QuestPDF.Infrastructure;
    using IPCU.Models;
    using System;
    using static QuestPDF.Helpers.Colors;

    public class TrainingEvaluationPdfService
    {
        public static byte[] GeneratePdf(TrainingEvaluation training)
        {
            return Document.Create(container =>
            {
                container.Page(page =>
                {
                    page.Margin(50);
                    page.Size(PageSizes.A4);

                    // ===== Header Section =====
                    page.Header().Column(col =>
                    {
                        col.Spacing(5);
                        col.Item().AlignCenter().Text("TRAINING EVALUATION REPORT").Bold().FontSize(22);
                        col.Item().AlignCenter().Text("Generated by IPCU System").FontSize(10).Italic();
                        col.Item().Element(container => container.PaddingVertical(5)).LineHorizontal(1);
                    });

                    // ===== Training Details Section (Formatted in Table) =====
                    page.Content().Column(col =>
                    {
                        col.Spacing(15);
                        col.Item().Border(1).Padding(1).Background(Grey.Lighten4).Table(table =>
                        {
                            table.ColumnsDefinition(columns =>
                            {
                                columns.ConstantColumn(120); // Label Column
                                columns.RelativeColumn();    // Value Column (Expands)
                            });

                            void AddRow(string label, string value)
                            {
                                table.Cell().Element(CellStyle).Text(label).Bold();
                                table.Cell().Element(CellStyle).Text(value);
                                table.Cell().ColumnSpan(2).Element(LineStyle).LineHorizontal(1); // Row separator
                            }

                            AddRow("Title", training.Title);
                            AddRow("Date", training.DateOfTraining.ToString("dd MMM yyyy"));
                            AddRow("Venue", training.Venue);
                            AddRow("Methodology", training.TrainingMethodology);

                            static IContainer CellStyle(IContainer container) =>
                                container.PaddingVertical(3).PaddingHorizontal(5);

                            static IContainer LineStyle(IContainer container) =>
                                container.PaddingVertical(2).ExtendHorizontal();
                        });

                        // ===== Section: Total Participants =====
                        col.Item().PaddingTop(5).Border(1).Padding(10).Column(column =>
                        {
                            column.Item()
         .Background(Colors.Grey.Lighten3) // Light gray background
         .Padding(2) // Adds padding to make text readable
         .AlignCenter()
         .Text("PARTICIPANTS").Bold().FontSize(12);


                            column.Item().Row(row =>
                            {
                                row.RelativeItem().Text("Male Participants:");
                                row.AutoItem().PaddingLeft(15).Text(training.TotalParticipantsMale.ToString()).Bold();
                            });

                            column.Item().Row(row =>
                            {
                                row.RelativeItem().Text("Female Participants:");
                                row.AutoItem().PaddingLeft(15).Text(training.TotalParticipantsFemale.ToString()).Bold();
                            });

                            column.Item().PaddingVertical(5).LineHorizontal(1); // Line separator

                            column.Item().Row(row =>
                            {
                                row.RelativeItem().Text("Total Participants:").Bold();
                                row.AutoItem().PaddingLeft(15).Text((training.TotalParticipantsMale + training.TotalParticipantsFemale).ToString()).Bold();
                            });
                        });


                        // ===== Row: Program Facilitation & Trainer Characteristics =====
                        col.Item().PaddingTop(15).Row(row =>
                        {
                            // PROGRAM FACILITATION (Left Box)
                            // PROGRAM FACILITATION (Left Box)
                            row.RelativeItem().Border(1).Padding(10).Column(column =>
                            {
                                column.Item().Row(rowHeader =>
                                {
                                    rowHeader.RelativeItem()
                                        .Background(Colors.Grey.Lighten3) // Light gray background
                                        .Padding(5) // Adds padding for better readability
                                        .Text("PROGRAM FACILITATION").Bold().FontSize(8);

                                    rowHeader.AutoItem()
                                        .Background(Colors.BlueGrey.Lighten3) // Matching background for consistency
                                        .Padding(5)
                                        .Text("  Rating").Bold().FontSize(8);
                                });

                                void AddFacilitationRow(string label, object value)
                                {
                                    column.Item().Row(row =>
                                    {
                                        row.RelativeItem().Text(label);
                                        row.AutoItem().PaddingLeft(10).Text(value.ToString()).Bold();
                                    });
                                }

                                AddFacilitationRow("Flow followed:", training.FlowFollowed);
                                AddFacilitationRow("Rules clearly established:", training.RulesEstablished);
                                AddFacilitationRow("Ability to initiate discussion:", training.InitiateDiscussion);
                                AddFacilitationRow("Technical capability:", training.TechnicalCapability);
                            });

                            row.RelativeItem().Border(1).Padding(10).Column(column =>
                            {
                                column.Item().Row(rowHeader =>
                                {
                                    rowHeader.RelativeItem()
     .Background(Colors.Grey.Lighten3) // Light gray background
     .Padding(5) // Adds padding for readability
     .Text("TRAINER CHARACTERISTICS").Bold().FontSize(8);

                                    rowHeader.AutoItem()
                                        .Background(Colors.BlueGrey.Lighten3) // Matching background for consistency
                                        .Padding(5)
                                        .Text("  Rating").Bold().FontSize(8);

                                });

                                void AddCharacteristicRow(string label, object value)
                                {
                                    column.Item().Row(row =>
                                    {
                                        row.RelativeItem().Text(label);
                                        row.AutoItem().PaddingLeft(10).Text(value.ToString()).Bold();
                                    });
                                }

                                AddCharacteristicRow("Preparedness of the SME:", training.Preparedness);
                                AddCharacteristicRow("Teaching Personality:", training.TeachingPersonality);
                                AddCharacteristicRow("Ability to Establish Rapport:", training.EstablishRapport);
                                AddCharacteristicRow("Genuine Respect for Participants:", training.RespectForParticipants);
                                AddCharacteristicRow("Voice Personality:", training.VoicePersonality);
                                AddCharacteristicRow("Time Management:", training.TimeManagement);
                            });

                        });

                        // Define CellStyle and LineStyle functions inside the same scope
                        static IContainer CellStyle(IContainer container) =>
                            container.PaddingVertical(4).PaddingHorizontal(5);

                        static IContainer LineStyle(IContainer container) =>
                            container.PaddingVertical(2).ExtendHorizontal();


                        // ===== Row: Module Evaluation & Mastery of Subject Matter =====
                        col.Item().PaddingTop(15).Row(row =>
                        {
                            // MODULE EVALUATION (Left Box)
                            row.RelativeItem().Border(1).Padding(10).Column(column =>
                            {
                                column.Item().Row(rowHeader =>
                                {
                                    rowHeader.RelativeItem().Background(Colors.Grey.Lighten3) // Matching background for consistency
                                        .Padding(5).Text("MODULE EVALUATION").Bold().FontSize(8);
                                    rowHeader.AutoItem().Background(Colors.BlueGrey.Lighten3) // Matching background for consistency
                                        .Padding(5).Text("  Rating").Bold().FontSize(8);
                                });

                                void AddModuleEvaluationRow(string label, object value)
                                {
                                    column.Item().Row(row =>
                                    {
                                        row.RelativeItem().Text(label);
                                        row.AutoItem().PaddingLeft(10).Text(value.ToString()).Bold();
                                    });
                                }

                                AddModuleEvaluationRow("Content Organization:", training.ContentOrganization);
                                AddModuleEvaluationRow("Objective Clearly Stated:", training.ObjectiveStated);
                                AddModuleEvaluationRow("Content Quality:", training.ContentQuality);
                                AddModuleEvaluationRow("Flow of Topic:", training.FlowOfTopic);
                                AddModuleEvaluationRow("Relevance of the Topic:", training.RelevanceOfTopic);
                                AddModuleEvaluationRow("Learning Activities:", training.LearningActivities);
                                AddModuleEvaluationRow("Visual Aids (Module Presentation):", training.VisualAids);
                            });

                            // MASTERY OF SUBJECT MATTER (Right Box)
                            row.RelativeItem().Border(1).Padding(10).Column(column =>
                            {
                                column.Item().Row(rowHeader =>
                                {
                                    rowHeader.RelativeItem().Background(Colors.Grey.Lighten3) // Matching background for consistency
                                        .Padding(5).Text("MASTERY OF SUBJECT MATTER").Bold().FontSize(8);
                                    rowHeader.AutoItem().Background(Colors.BlueGrey.Lighten3) // Matching background for consistency
                                        .Padding(5).Text("  Rating").Bold().FontSize(8);
                                });

                                void AddMasteryRow(string label, object value)
                                {
                                    column.Item().Row(row =>
                                    {
                                        row.RelativeItem().Text(label);
                                        row.AutoItem().PaddingLeft(10).Text(value.ToString()).Bold();
                                    });
                                }

                                AddMasteryRow("Ability to Present Knowledge:", training.PresentKnowledge);
                                AddMasteryRow("Ability to Balance Principles:", training.BalancePrinciples);
                                AddMasteryRow("Ability to Address Clarifications:", training.AddressClarifications);
                            });

                        });


                       

                        // ===== Section: Suggestions for Improvement =====
                        col.Item().PaddingTop(15).Text("SUGGESTIONS FOR IMPROVEMENT").Bold().FontSize(12);
                        col.Item().Border(1).Padding(10).Text(training.SuggestionsForImprovement ?? "N/A");
                    });

                    // ===== Footer Section =====
                    page.Footer()
                        .AlignCenter()
                        .Text($"Generated on {DateTime.Now:dd MMM yyyy}").FontSize(10).Italic();
                });
            }).GeneratePdf();
        }
    }
}
