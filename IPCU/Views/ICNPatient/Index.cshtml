@model IEnumerable<IPCU.Models.PatientViewModel>
@inject UserManager<ApplicationUser> UserManager
@using Microsoft.AspNetCore.Identity
@{
    ViewData["Title"] = "ICN Patient List";
    
    // Group patients by station
    var patientsByStation = Model.GroupBy(p => p.StationName ?? p.AdmLocation ?? "Unknown").OrderBy(g => g.Key);
    
    // Get pagination info from ViewBag
    var paginationInfo = ViewBag.PaginationInfo;
    var currentPage = paginationInfo?.CurrentPage ?? 1;
    var pageSize = paginationInfo?.PageSize ?? 25;
    var totalPages = paginationInfo?.TotalPages ?? 1;
    var totalRecords = paginationInfo?.TotalRecords ?? 0;
    var availableStations = paginationInfo?.AvailableStations ?? new List<string>();
    var currentStationFilter = ViewBag.CurrentStationFilter;
}
<!-- Custom CSS for the dashboard -->
<style>
    .dashboard-header {
        background-color: #f8f9fa;
        border-left: 4px solid #0d6efd;
        padding: 15px 20px;
        margin-bottom: 25px;
        border-radius: 4px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.05);
    }

    .stats-card {
        background-color: white;
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 20px;
        box-shadow: 0 0 15px rgba(0,0,0,0.05);
        transition: transform 0.2s;
    }

    .stats-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }

    .stats-card .number {
        font-size: 28px;
        font-weight: bold;
        color: #0d6efd;
    }

    .stats-card .label {
        color: #6c757d;
        font-size: 14px;
    }

    .patient-table {
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 0 20px rgba(0,0,0,0.05);
    }

    .patient-table thead {
        background-color: #0d6efd;
        color: white;
    }

    .patient-table th {
        font-weight: 500;
        padding: 12px 15px;
    }

    .patient-table td {
        padding: 12px 15px;
        vertical-align: middle;
    }

    .dataTables_wrapper .dataTables_filter input {
        border-radius: 20px;
        border: 1px solid #ced4da;
        padding: 5px 15px;
    }

    .room-badge {
        padding: 5px 10px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 500;
    }

    .admission-duration {
        font-weight: 500;
    }

    .admission-duration.critical {
        color: #dc3545;
    }

    .admission-duration.warning {
        color: #fd7e14;
    }

    .admission-duration.normal {
        color: #0d6efd;
    }

    .btn-view-details {
        border-radius: 20px;
        padding: 4px 12px;
    }

    .hai-badge {
        border-radius: 20px;
        padding: 4px 10px;
        font-size: 12px;
        font-weight: 500;
    }

    .hai-status-yes {
        background-color: #dc3545;
        color: white;
    }

    .hai-status-no {
        background-color: #198754;
        color: white;
    }

    .btn-hai-action {
        border-radius: 20px;
        padding: 4px 12px;
        margin-left: 5px;
    }

    .hai-count-badge {
        background-color: #ffc107;
        color: #212529;
        font-weight: bold;
        margin-left: 5px;
    }
    
    .station-card {
        margin-bottom: 30px;
        border: none;
        box-shadow: 0 0 20px rgba(0,0,0,0.08);
    }
    
    .station-header {
        background-color: #f1f8ff;
        border-left: 5px solid #0d6efd;
        padding: 15px;
        margin-bottom: 0;
        font-size: 18px;
        font-weight: 600;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    
    .station-stats {
        display: flex;
        gap: 15px;
    }
    
    .station-stat {
        background: white;
        border-radius: 20px;
        padding: 5px 12px;
        font-size: 14px;
        font-weight: 500;
    }
    
    /* Pagination styles */
    .pagination-container {
        margin-top: 30px;
        margin-bottom: 30px;
        display: flex;
        justify-content: center;
        flex-wrap: wrap;
    }
    
    .page-size-selector {
        margin-left: 20px;
        display: flex;
        align-items: center;
    }
    
    .page-size-selector select {
        margin-left: 10px;
        border-radius: 4px;
        border: 1px solid #ced4da;
        padding: 5px 10px;
    }
    
    .page-info {
        margin-top: 10px;
        text-align: center;
        color: #6c757d;
    }
    
    .station-filter {
        margin-bottom: 20px;
        display: flex;
        align-items: center;
        gap: 10px;
        flex-wrap: wrap;
    }
    
    .pagination .page-link {
        border-radius: 4px;
        margin: 0 2px;
    }
    
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255, 0.8);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999;
        opacity: 0;
        visibility: hidden;
        transition: opacity 0.3s, visibility 0.3s;
    }
    
    .loading-overlay.active {
        opacity: 1;
        visibility: visible;
    }
    
    .loading-spinner {
        width: 50px;
        height: 50px;
        border: 5px solid #f3f3f3;
        border-top: 5px solid #0d6efd;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }


</style>
<div class="container-fluid py-4">
    <div class="dashboard-header">
        <h2 class="mb-1">ICN Patient Monitoring Dashboard</h2>
        <p class="text-muted mb-0">Patients in your assigned areas admitted for 48+ hours</p>
    </div>

    @{
        var currentUser = await UserManager.GetUserAsync(User);
        var assignedAreas = currentUser?.AssignedArea?.Split(',').Select(a => a.Trim()).ToList() ?? new List<string>();
    }

    <div class="alert alert-info mb-4">
        <div class="d-flex align-items-center">
            <i class="fas fa-map-marker-alt me-3"></i>
            <div>
                <strong>Your Assigned Area@(assignedAreas.Count > 1 ? "s" : ""):</strong>
                @if (assignedAreas.Any())
                {
                    @string.Join(", ", assignedAreas)
                }
                else
                {
                    <span class="text-warning">No areas assigned</span>
                }
            </div>
        </div>
    </div>

    <!-- Debug Panel -->
    @if (ViewBag.Debug != null || ViewBag.ErrorMessage != null || ViewBag.ExceptionMessage != null)
    {
        <div class="card mb-4 shadow-sm border-warning">
            <div class="card-header bg-warning text-dark">
                <h5 class="mb-0">
                    <button class="btn btn-link text-dark" type="button" data-bs-toggle="collapse" data-bs-target="#debugPanel" aria-expanded="false" aria-controls="debugPanel">
                        <i class="fas fa-bug me-2"></i> Debug Information (Click to Expand)
                    </button>
                </h5>
            </div>
            <div class="collapse" id="debugPanel">
                <div class="card-body">
                    @if (ViewBag.ErrorMessage != null)
                    {
                        <div class="alert alert-danger">
                            <h5><i class="fas fa-exclamation-triangle me-2"></i> Error Message:</h5>
                            <p>@ViewBag.ErrorMessage</p>
                        </div>
                    }

                    @if (ViewBag.RecentAdmits != null)
                    {
                        <div class="alert alert-info">
                            <h5>Most Recent Admissions:</h5>
                            <ul>
                                @foreach (var patient in ViewBag.RecentAdmits)
                                {
                                    <li>HospNum: @patient.HospNum - AdmDate: @patient.AdmDate</li>
                                }
                            </ul>
                        </div>
                    }

                    @if (ViewBag.ExceptionMessage != null)
                    {
                        <div class="alert alert-danger">
                            <h5><i class="fas fa-exclamation-circle me-2"></i> Exception:</h5>
                            <p>@ViewBag.ExceptionMessage</p>
                            <pre class="mt-2 bg-light p-2 small">@ViewBag.StackTrace</pre>
                        </div>
                    }

                    @if (ViewBag.InnerExceptionMessage != null)
                    {
                        <div class="alert alert-danger">
                            <h5><i class="fas fa-exclamation-circle me-2"></i> Inner Exception:</h5>
                            <p>@ViewBag.InnerExceptionMessage</p>
                            <pre class="mt-2 bg-light p-2 small">@ViewBag.InnerStackTrace</pre>
                        </div>
                    }

                    @if (TempData["SuccessMessage"] != null)
                    {
                        <div class="alert alert-success alert-dismissible fade show">
                            <i class="fas fa-check-circle me-2"></i> @TempData["SuccessMessage"]
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    }

                    @if (TempData["ErrorMessage"] != null)
                    {
                        <div class="alert alert-danger alert-dismissible fade show">
                            <i class="fas fa-exclamation-circle me-2"></i> @TempData["ErrorMessage"]
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    }

                    @if (ViewBag.Debug != null)
                    {
                        <h5 class="mt-3">Debug Counters:</h5>
                        <div class="table-responsive">
                            <table class="table table-sm table-bordered">
                                <thead class="table-light">
                                    <tr>
                                        <th>Metric</th>
                                        <th>Value</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var debug in ViewBag.Debug)
                                    {
                                        <tr>
                                            <td>@debug.Key</td>
                                            <td>@debug.Value</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>
    }

    <!-- Stats Cards -->
    <div class="row mb-4">
        <div class="col-lg-3 col-md-6">
            <div class="stats-card">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <p class="label mb-0">Total Patients</p>
                        <h3 class="number mb-0">@totalRecords</h3>
                    </div>
                    <div>
                        <i class="fas fa-user-injured fa-2x text-primary opacity-50"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-6">
            <div class="stats-card">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <p class="label mb-0">Average Stay</p>
                        <h3 class="number mb-0">@(Model.Any() ? Math.Round(Model.Average(p => p.AdmissionDuration)) : 0) days</h3>
                    </div>
                    <div>
                        <i class="fas fa-calendar-day fa-2x text-success opacity-50"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-6">
            <div class="stats-card">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <p class="label mb-0">Extended Stay (7+ days)</p>
                        <h3 class="number mb-0">@Model.Count(p => p.AdmissionDuration >= 7)</h3>
                    </div>
                    <div>
                        <i class="fas fa-hourglass-half fa-2x text-warning opacity-50"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-6">
            <div class="stats-card">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <p class="label mb-0">HAI Cases</p>
                        <h3 class="number mb-0">@Model.Count(p => p.HaiStatus)</h3>
                    </div>
                    <div>
                        <i class="fas fa-virus fa-2x text-danger opacity-50"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-3">
         <!-- Station Filter -->
        <div class="col-md">
    <div class="station-filter">
        <form asp-action="Index" method="get" id="stationFilterForm" class="d-flex align-items-center flex-wrap">
            <label for="stationFilter" class="form-label mb-0 me-2">Filter by Station:</label>
            <select name="stationFilter" id="stationFilter" class="form-select form-select-sm me-2" style="width: auto;" asp-items="@(new SelectList(availableStations, currentStationFilter))">
                <option value="">All Stations</option>
            </select>
            <input type="hidden" name="page" value="1" />
            <input type="hidden" name="pageSize" value="@pageSize" />
            <button type="submit" class="btn btn-primary btn-sm me-2">Apply Filter</button>
            @if (!string.IsNullOrEmpty(currentStationFilter))
            {
                <a href="@Url.Action("Index", new { page = 1, pageSize })" class="btn btn-outline-secondary btn-sm">Clear Filter</a>
            }
        </form>

        <!-- Page Size Selector -->
        <div class="page-size-selector">
            <span>Show:</span>
            <select id="pageSizeSelector" class="form-select form-select-sm" style="width:65px" asp-items="@(new SelectList(new[] { 10, 25, 50, 100 }, pageSize))">
            </select>
        </div>
    </div>
        </div>
        <div class="col-md-6 text-end d-flex flex-wrap justify-content-end gap-2">
            <a asp-action="GenerateHAILineListReport" class="btn btn-primary mb-2">
                <i class="fas fa-download"></i> HAI Line List
            </a>
            <a asp-controller="DeviceMonitoringReport" asp-action="Index" class="btn btn-info mb-2">
                <i class="bi bi-file-earmark-pdf"></i> Device Report
            </a>
            <a asp-controller="PatientMovements" asp-action="Index" class="btn btn-info mb-2">
                <i class="bi bi-file-earmark-pdf"></i> Patient Movement
            </a>
            <a href="@Url.Action("Index", "HAIDischargeReport")" class="btn btn-primary mb-2">
                <i class="fas fa-chart-bar"></i> HAI Discharge Report
            </a>
            <a href="@Url.Action("Index", "HaiReport")" class="btn btn-primary mb-2">
                <i class="fas fa-chart-bar"></i> HAI Summary
            </a>
            <a asp-controller="ICNPatient" asp-action="PrintMechanicalVentilatorPDF" class="btn btn-primary mb-2">
                <i class="fa fa-print"></i> Print Ventilator Report
            </a>
        </div>
    </div>

    <!-- Loading overlay -->
    <div class="loading-overlay" id="loadingOverlay">
        <div class="loading-spinner"></div>
    </div>

    <!-- Patient Data by Station -->
    @if (!Model.Any())
    {
        <div class="alert alert-info">
            <i class="fas fa-info-circle me-2"></i> No patients found matching the criteria.
        </div>
    }
    else
    {
        foreach (var stationGroup in patientsByStation)
        {
            var stationPatients = stationGroup.ToList();
            var haiCount = stationPatients.Count(p => p.HaiStatus);
            var extendedStayCount = stationPatients.Count(p => p.AdmissionDuration >= 7);
            
            <div class="card station-card mb-4">
                <div class="station-header">
                    <div class="col-md-6">
                     <h2>Patient List</h2>
                   </div>
                    <span>
                        <i class="fas fa-hospital-alt me-2"></i>
                        @stationGroup.Key
                    </span>
                    <div class="station-stats">
                        <div class="station-stat">
                            <i class="fas fa-user-injured me-1"></i> @stationPatients.Count patients
                        </div>
                        <div class="station-stat @(haiCount > 0 ? "text-danger" : "text-success")">
                            <i class="fas fa-virus me-1"></i> @haiCount HAI cases
                        </div>
                        <div class="station-stat @(extendedStayCount > 0 ? "text-warning" : "text-success")">
                            <i class="fas fa-hourglass-half me-1"></i> @extendedStayCount extended stays
                        </div>
                    </div>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0 patient-table">
                            <thead>
                                <tr>
                                    <th>Patient Name</th>
                                    <th>Hospital #</th>
                                    <th>Room/Bed</th>
                                    <th>Stay Duration</th>
                                    <th>HAI Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var patient in stationPatients)
                                {
                                    var durationClass = patient.AdmissionDuration >= 14 ? "critical" :
                                    patient.AdmissionDuration >= 7 ? "warning" : "normal";

                                    <tr>
                                        <td>
                                            <strong>@patient.PatientName</strong>
                                            <div class="small text-muted">
                                                @patient.Age yrs | @patient.Sex | @patient.PatientType
                                            </div>
                                        </td>
                                        <td>@patient.HospNum</td>
                                        <td>
                                            <span class="badge bg-info room-badge">
                                                @(string.IsNullOrEmpty(patient.RoomDescription) ? patient.RoomID : patient.RoomDescription)
                                            </span>
                                        </td>
                                        <td>
                                            <span class="admission-duration @durationClass">
                                                @patient.AdmissionDuration days
                                            </span>
                                            <div class="small text-muted">
                                                Admitted: @(patient.AdmDate?.ToString("MMM dd, yyyy") ?? "N/A")
                                            </div>
                                        </td>
                                        <td>
                                            <span class="hai-badge @(patient.HaiStatus ? "hai-status-yes" : "hai-status-no")">
                                                @(patient.HaiStatus ? "YES" : "NO")
                                            </span>
                                            @if (patient.HaiStatus && patient.HaiCount > 0)
                                            {
                                                <span class="badge hai-count-badge">@patient.HaiCount</span>
                                            }
                                        </td>
                                        <td>
                                            <div class="d-flex">
                                                <a asp-action="Details" asp-route-id="@patient.IdNum" class="btn btn-sm btn-primary btn-view-details">
                                                    <i class="fas fa-eye me-1"></i> View
                                                </a>
                                                @if (!patient.HaiStatus)
                                                {
                                                    <button type="button" class="btn btn-sm btn-danger btn-hai-action mark-hai-btn"
                                                            data-id="@patient.IdNum" data-name="@patient.PatientName">
                                                        <i class="fas fa-virus me-1"></i> Mark HAI
                                                    </button>
                                                }
                                                else
                                                {
                                                    <a asp-action="HaiChecklist" asp-route-id="@patient.IdNum" class="btn btn-sm btn-warning btn-hai-action">
                                                        <i class="fas fa-clipboard-check me-1"></i> HAI Checklist
                                                    </a>
                                                }
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        }
    }

    <!-- Pagination -->
        <div class="pagination-container">
            <nav aria-label="Page navigation">
                <ul class="pagination">
                    @if (currentPage > 1)
                    {
                        <li class="page-item">
                            <a class="page-link navLink" href="@Url.Action("Index", new { page = 1, pageSize, stationFilter = currentStationFilter })" aria-label="First">
                                <span aria-hidden="true">&laquo;&laquo;</span>
                            </a>
                        </li>
                        <li class="page-item">
                            <a class="page-link navLink" href="@Url.Action("Index", new { page = currentPage - 1, pageSize, stationFilter = currentStationFilter })" aria-label="Previous">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>
                    }
                    else
                    {
                        <li class="page-item disabled">
                            <a class="page-link" href="#" aria-label="First">
                                <span aria-hidden="true">&laquo;&laquo;</span>
                            </a>
                        </li>
                        <li class="page-item disabled">
                            <a class="page-link" href="#" aria-label="Previous">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>
                    }

                    @{
                        int startPage = Math.Max(1, currentPage - 2);
                        int endPage = Math.Min(totalPages, startPage + 4);

                        if (endPage - startPage < 4 && totalPages > 4)
                        {
                            startPage = Math.Max(1, endPage - 4);
                        }
                    }

                    @for (int i = startPage; i <= endPage; i++)
                    {
                        <li class="page-item @(i == currentPage ? "active" : "")">
                            <a class="page-link navLink" href="@Url.Action("Index", new { page = i, pageSize, stationFilter = currentStationFilter })">@i</a>
                        </li>
                    }

                    @if (currentPage < totalPages)
                    {
                        <li class="page-item">
                            <a class="page-link navLink" href="@Url.Action("Index", new { page = currentPage + 1, pageSize, stationFilter = currentStationFilter })" aria-label="Next">
                                <span aria-hidden="true">&raquo;</span>
                            </a>
                        </li>
                        <li class="page-item">
                            <a class="page-link navLink" href="@Url.Action("Index", new { page = totalPages, pageSize, stationFilter = currentStationFilter })" aria-label="Last">
                                <span aria-hidden="true">&raquo;&raquo;</span>
                            </a>
                        </li>
                    }
                    else
                    {
                        <li class="page-item disabled">
                            <a class="page-link" href="#" aria-label="Next">
                                <span aria-hidden="true">&raquo;</span>
                            </a>
                        </li>
                        <li class="page-item disabled">
                            <a class="page-link" href="#" aria-label="Last">
                                <span aria-hidden="true">&raquo;&raquo;</span>
                            </a>
                        </li>
                    }
                </ul>
            </nav>
    </div>

    <div class="page-info text-center">
        Showing @((currentPage - 1) * pageSize + (Model.Any() ? 1 : 0)) to @(Math.Min(currentPage * pageSize, totalRecords)) of @totalRecords patients
    </div>

</div>

<!-- HAI Confirmation Modal -->
<div class="modal fade" id="haiConfirmationModal" tabindex="-1" aria-labelledby="haiConfirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="haiConfirmationModalLabel">Confirm HAI Status</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to mark <strong id="patientNameSpan"></strong> as having a Healthcare-Associated Infection (HAI)?</p>
                <p class="text-danger"><i class="fas fa-exclamation-triangle me-2"></i>This action will trigger infection control protocols and cannot be easily undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form id="markHaiForm" asp-action="UpdateHaiStatus" method="post">
                    <input type="hidden" id="patientIdInput" name="id" value="" />
                    @Html.AntiForgeryToken()
                    <button type="submit" class="btn btn-danger">Confirm HAI Status</button>
                </form>
            </div>
        </div>
    </div>

@section Scripts {
<script>
         $(document).ready(function () {
            // Show loading overlay function
            function showLoading() {
                $('#loadingOverlay').addClass('active');
            }

            // Hide loading overlay function
            function hideLoading() {
                $('#loadingOverlay').removeClass('active');
            }

            // Handle page size change
            $('#pageSizeSelector').change(function() {
                var pageSize = $(this).val();
                var url = '@Url.Action("Index", new { page = 1, stationFilter = currentStationFilter })' + '&pageSize=' + pageSize;
                showLoading();
                window.location.href = url;
            });

            // Add loading overlay to navigation links
            $('.navLink').click(function(e) {
                // Check if it's not a download link
                if (!$(this).attr('href').includes('Print') && !$(this).attr('href').includes('Generate')) {
                    showLoading();
                }
            });

            // Handle form submissions
            $('form').submit(function() {
                showLoading();
            });

            // Initialize tooltips
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });

            // Initialize popovers if any
            var popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'))
            var popoverList = popoverTriggerList.map(function (popoverTriggerEl) {
                return new bootstrap.Popover(popoverTriggerEl);
            });

            // Station filter form submission enhancement
            $('#stationFilterForm').on('change', '#stationFilter', function() {
                // Optional: auto-submit when selection changes
                // $(this).closest('form').submit();
            });

            // Patient search functionality
            $('#patientSearch').on('keyup', function() {
                var value = $(this).val().toLowerCase();
                $('.patient-table tbody tr').filter(function() {
                    $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
                });
            });

            // Hide alerts after 5 seconds
            setTimeout(function() {
                $('.alert-dismissible').fadeOut('slow');
            }, 5000);

            // Add click handler for debug panel toggle
            $('.btn-link[data-bs-toggle="collapse"]').on('click', function() {
                var expanded = $(this).attr('aria-expanded') === 'true';
                $(this).find('i').toggleClass('fa-angle-down', !expanded).toggleClass('fa-angle-up', expanded);
            });

            // Handle page load complete
            $(window).on('load', function() {
                hideLoading();
            });

                            // Handle HAI confirmation modal
                $('.mark-hai-btn').click(function() {
                    var patientId = $(this).data('id');
                    var patientName = $(this).data('name');

                    // Log for debugging
                    console.log("Patient ID:", patientId);
                    console.log("Patient Name:", patientName);

                    $('#patientIdInput').val(patientId);
                    $('#patientNameSpan').text(patientName);

                    var modal = new bootstrap.Modal(document.getElementById('haiConfirmationModal'));
                    modal.show();
                });

            // Handle any AJAX calls
            $(document).ajaxStart(function() {
                showLoading();
            }).ajaxStop(function() {
                hideLoading();
            });
        });
    </script>

}